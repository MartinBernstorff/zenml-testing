[project]
name = "zenml-testing"
version = "0.0.0"
authors = [
    {name = "Martin Bernstorff", email = "martinbernstorfff@gmail.com"},
]
description = "Zenml Testing"

classifiers = [
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

requires-python = ">=3.8"
dependencies = [
    # add you dependencies here (e.g. "numpy>=1.20.0,<1.21.0")
]

[project.license]
file = "LICENSE"
name = "MIT"

[project.urls]
homepage = "https://github.com/MartinBernstorff/zenml-testing"
repository = "https://github.com/MartinBernstorff/zenml-testing"
documentation = "https://MartinBernstorff.github.io/zenml-testing/"

[project.optional-dependencies]
dev = [
    "cruft",
    "ruff",
    "pylint",
    "black==23.1.0",
    "pre-commit==2.20.0,<2.21.0",
    "mypy==0.991"
]

tests = [
    "pytest>=7.1.3,<7.3.0",
    "pytest-cov>=3.0.0,<3.1.0",
    "typeguard>=2.13.3,<2.14.0",
]

docs = [
    "sphinx>=5.3.0,<5.4.0",
    "furo>=2022.12.7,< 2022.12.8",
    "sphinx-copybutton>=0.5.1,<0.5.2",
    "sphinxext-opengraph>=0.7.3,<0.7.4",
    "sphinx_design>=0.3.0,<0.3.1",
    "myst-nb>=0.6.0,<1.17.0",
    "sphinx_togglebutton>=0.2.3,<0.4.0",
]

tutorials = [
    "jupyter>=1.0.0,<1.1.0"
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.pylint]
load-plugins = "pylint.extensions.docparams,pylint.extensions.code_style,pylint.extensions.for_any_all,pylint.extensions.typing"
good-names = "df,p,f,d,e,n,k,i,v"
disable = "too-many-lines,line-too-long,missing-raises-doc,no-self-argument,unused-wildcard-import,wildcard-import,no-else-return,too-many-arguments,redefined-outer-name,c-extension-no-member,wrong-import-order,logging-fstring-interpolation,unused-import,deprecated-typing-alias,missing-module-docstring"
ignore-paths = ['docs/*']

[tool.semantic_release]
branch = "main"
version_variable = [
    "pyproject.toml:version"
]
upload_to_pypi = false
upload_to_release = false
build_command = "python -m pip install build; python -m build"

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["A", "B", "C4", "COM", "E", "ERA", "F", "I", "ICN", "NPY001", "PIE", "PT", "PD002", "UP", "Q", "PTH", "RSE", "RET", "SIM", "W"]
ignore = ["E501", "RET504"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = ["ERA"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__init__.py",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-third-party = ["wandb"]